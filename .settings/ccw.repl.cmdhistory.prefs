cmdhistory=[";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(get-handler)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.handler namespace" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server )" ";; Switching to Clojure-webapp.model namespace" "(get-board)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(get-handler)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.controller namespace" "(start-server)" ";; Switching to Clojure-webapp.controller namespace" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(model/reset-game\!)" "(Clojure-webapp.model/reset-game\!)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "\\n(defn start-server [& [port]]\\n  (let [port (if port (Integer/parseInt port) 8080)]\\n    (reset\! server\\n            (serve (get-handler)\\n                   {\:port port\\n                    \:auto-reload? true\\n                    \:join true}))\\n    (println (str \\"You can view the site at http\://localhost\:\\" port))))\\n" "(ns Clojure-webapp.repl\\n  (\:use Clojure-webapp.handler\\n        ring.server.standalone\\n        [ring.middleware file-info file]))\\n\\n(defonce server (atom nil))\\n\\n(defn get-handler[]\\n  (-> \#'app\\n    (wrap-file \\"resources\\")\\n    (wrap-file-info)))\\n\\n(defn start-server [& [port]]\\n  (let [port (if port (Integer/parseInt port) 8080)]\\n    (reset\! server\\n            (serve (get-handler)\\n                   {\:port port\\n                    \:auto-reload? true\\n                    \:join true}))\\n    (println (str \\"You can view the site at http\://localhost\:\\" port))))\\n\\n(defn stop-server []\\n  (.stop @server)\\n  (reset\! server nil))" ";; Switching to Clojure-webapp.repl namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "\\n(defn stop-server []\\n  (.stop @server)\\n  (reset\! server nil))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(a-test)" "(clojure.core/ns Clojure-webapp.core-test)\\n\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 0 1))))\\n\\n(clojure.core/ns Clojure-webapp.repl)" "(run-tests)" "(clojure.core/ns Clojure-webapp.core-test)\\n(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core))\\n\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 0 1))))\\n\\n(clojure.core/ns Clojure-webapp.repl)" "(run-tests)" "(clojure.core/ns Clojure-webapp.core-test)\\n(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core))\\n\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 0 1))))\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.repl)" "(clojure.core/ns Clojure-webapp.core-test)\\n(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core))\\n\\n(run-tests)\\n\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 0 1))))\\n\\n(clojure.core/ns Clojure-webapp.repl)" "(clojure.core/ns Clojure-webapp.core-test)\\n(flatten [1 [1]])\\n(clojure.core/ns Clojure-webapp.repl)" "(clojure.core/ns Clojure-webapp.core-test)\\n(set (flatten [1 [1]]))\\n(clojure.core/ns Clojure-webapp.repl)" "(clojure.core/ns Clojure-webapp.core-test)\\n(\= 25 (count (set (flatten model/randboard)))\\n(clojure.core/ns Clojure-webapp.repl)" "(\= 25 (count (set (flatten model/randboard))))" "(\= 25 (count (set (flatten randboard))))" "(\= 25 (count (set (flatten Clojure-webapp.model/randboard))))" "(println (set (flatten Clojure-webapp.model/randboard)))" "(println Clojure-webapp.model/randboard)" "(\= 25 (count (set (flatten (Clojure-webapp.model/randboard)))))" "\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))" "\\n(run-tests)\\n\\n(deftest a-test\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))" "\\n(run-tests)\\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))" "(run-tests)\\n\\n(deftest findallwincombos\\n  (is (\= td/poo \\"poo\\")))\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(println  td/poo \\"poo\\")" "(println  (td/poo) \\"poo\\")" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core\\n        Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n(println  (td/poo) \\"poo\\")\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(clojure.core/ns Clojure-webapp.test.testdata)\\n(ns Clojure-webapp.test.testdata\\n  (\:use clojure.set))\\n\\n(def poo [1 2 3])\\n(clojure.core/ns Clojure-webapp.core-test)" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core\\n        Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n(println  (td/poo) \\"poo\\")\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core\\n        Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n(println  td/poo)\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test\\n        Clojure-webapp.core\\n        Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n(println td/poo)\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test)\\n  (\:use Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n(println td/poo)\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(ns Clojure-webapp.core-test\\n  (\:use clojure.test)\\n  (\:use Closure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(run-tests)\\n\\n;(println td/poo)\\n  \\n\\n(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\n\\n" "(deftest nodoublenumbersoncard\\n  (testing \\"FIXME, I fail.\\"\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.core-test)))" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model))\\n\\n\\r\\n(run-tests)\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model))\\n\\n(deftest checkwincombos\\n  (is true))\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (is td/poo))\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (is td/poo \\"\\"))\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (is (\= td/poo \\"\\")))\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(println td/poo)\\n(clojure.core/ns Clojure-webapp.core-test)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.test.testdata)))" "(clojure.core/ns Clojure-webapp.test.testdata)\\n(ns Clojure-webapp.test.testdata\\n  (\:use clojure.set))\\n\\n(def win-combinations \\n  [[[X0 0 0 0 0 0]\\n    [X0 0 0 0 0 0]\\n    [X0 0 0 0 0 0]\\n    [X0 0 0 0 0 0]\\n    [X0 0 0 0 0 0]]\\n   \\n   ])\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.testdata)\\n(ns Clojure-webapp.test.testdata\\n  (\:use clojure.set))\\n\\n(def win-combinations \\n  [[[\\"X0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\"]\\n    [\\"X0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\"]\\n    [\\"X0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\"]\\n    [\\"X0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\"]\\n    [\\"X0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\" \\"0\\"]]\\n   \\n   ])\\n(clojure.core/ns Clojure-webapp.core-test)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.test.testdata)))" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (is true))\\n\\n(println td/win-combinations)\\n\\r\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (\= (winner-in-rows-cols-ordiags? board\#)))))\\n\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n\\r\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(doseq [board\# td/win-combinations]\\r\\n    (println (winner-in-rows-cols-ordiags? board\#)))\\n\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.model)\\n(ns Clojure-webapp.model\\n  (\:require [noir.session \:as session]))\\n\\n(defn split [n xs]\\r\\n  (reduce \#(if (< (count (first %1)) n)\\r\\n         (list (concat (first %1) [%2]) '())\\r\\n         (list (first %1) (concat (last %1) [%2])))\\r\\n      '(() ()) xs))(defn remove-at [k xs]\\r\\n  (let [s (split (inc k) xs)]\\r\\n    (list\\r\\n     (concat (butlast (first s)) (last s))\\r\\n     (last (first s))))\\r\\n  )\\r\\n(defn random-select [n xs]\\r\\n  (let [r (remove-at (rand-int (count xs)) xs)]\\r\\n    (if (\= 1 n)\\r\\n      (list (last r))\\r\\n      (cons (last r) (random-select (dec n) (first r))))))\\r\\n(defn remove-at [k xs]\\r\\n  (let [s (split (inc k) xs)]\\r\\n    (list\\r\\n     (concat (butlast (first s)) (last s))\\r\\n     (last (first s))))\\r\\n  )\\r\\n(defn full-board? []\\n  (< 98 (inc (\:beurt (session/get \:game-state)))))\\n  \\r\\n\\n(defn randboard []\\r\\n   (vec (clojure.core/sort (random-select 25 (range 1 100)))))\\r\\n\\n(defn empty-board []\\n  (loop [result (transient []), length-left 5, interim-val (randboard)]\\r\\n    (if (\= length-left 0)\\r\\n      (persistent\! result)\\r\\n      (recur \\r\\n        (conj\! result (vec (take 5 interim-val)))\\r\\n      (- length-left 1)\\r\\n      (drop 5 interim-val)))))\\r\\n\\n(defn reset-game\! []\\n  (session/put\! \:game-state {\:board (empty-board) \:beurt 0 \:getrokken (random-select 99 (range 1 100)) } ));init-state))\\r\\n\\n(defn get-board []\\n  (\:board (session/get \:game-state)))\\n\\n(defn get-beurtgetal []\\n    (nth (\:getrokken (session/get \:game-state)) (\:beurt (session/get \:game-state))))\\n\\n(defn getrokken-getallen []\\n  (take (\:beurt (session/get \:game-state)) (\:getrokken (session/get \:game-state))))\\n\\r\\n(defn get-board-cell \\n  ([coll] (get-board-cell (nth coll 0) (nth coll 1)))\\n  ([row col] (get-board-cell (get-board) row col))\\n  ([board row col] (get-in board [row col])))\\n\\n(defn cell-is-beurtgetal? [row col]\\r\\n    (\= (get-beurtgetal) (get-board-cell row col)))\\r\\n\\r\\n(defn winner-in-rows-cols-ordiags?  \\n  ([] (winner-in-rows-cols-ordiags? (get-board)))\\n  ([board]\\r\\n    (let [diag-coords [[[0 0] [1 1] [2 2] [3 3] [4 4]]\\r\\n                       [[0 4] [3 1] [2 2] [1 3] [0 4]]\\n                       \\r\\n                       [[0 0] [1 0] [2 0] [3 0] [4 0]]\\r\\n                       [[0 1] [1 1] [2 1] [3 1] [4 1]]\\r\\n                       [[0 2] [1 2] [2 2] [3 2] [4 2]]\\r\\n                       [[0 3] [1 3] [2 3] [3 3] [4 3]]\\r\\n                       [[0 4] [1 4] [2 4] [3 4] [4 4]]\\r\\n                       \\n                       [[0 0] [0 1] [0 2] [0 3] [0 4]]\\r\\n                       [[1 0] [1 1] [1 2] [1 3] [1 4]]\\r\\n                       [[2 0] [2 1] [2 2] [2 3] [2 4]]\\r\\n                       [[3 0] [3 1] [3 2] [3 3] [3 4]]\\r\\n                       [[4 0] [4 1] [4 2] [4 3] [4 4]]\\n                       ]]\\r\\n      (boolean (some (fn [coords] \\r\\n                       (every? (fn [coord] \\n                                 (let [cell (if (\= \\\\X (first (str (get-board-cell board (nth coord 0) (nth coord 1))))) \\n                                              (str \\\\X)\\n                                              (str (get-board-cell board (nth coord 0) (nth coord 1))))]\\n                                   (\= (str \\\\X)  cell )))\\r\\n                               coords))\\r\\n                     diag-coords)))))\\n\\n(defn winner? \\n  [] (winner-in-rows-cols-ordiags?))\\n\\r\\n(defn new-beurtstate [oldstate]\\r\\n  {\:board (get-board)\\r\\n   \:beurt (inc (\:beurt oldstate))\\r\\n   \:getrokken (\:getrokken oldstate)})\\r\\n\\r\\n(defn volgende-beurt\! []\\r\\n  (session/swap\! (fn [session-state]\\r\\n                   (assoc session-state \:game-state\\r\\n                          (new-beurtstate (\:game-state session-state))))))\\n\\r\\n(defn new-state [row col oldstate]\\r\\n  (let [X (if (\= \\\\X (first (str (get-board-cell row col)))) \\"\\" \\"X\\" )]\\r\\n    {\:board (assoc-in (\:board oldstate) [row col] (str \\\\X (get-board-cell row col)))\\r\\n     \:beurt (\:beurt oldstate)\\r\\n     \:getrokken (\:getrokken oldstate)}))\\r\\n    \\r\\n(defn play\! [row col]\\r\\n  (do (session/swap\! (fn [session-map]\\r\\n                   (assoc session-map \:game-state \\r\\n                          (new-state row col (\:game-state session-map))))))\\r\\n  (volgende-beurt\!))\\n\\n(defn showcache []\\n  (session/get \:game-state))\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(doseq [board\# td/win-combinations]\\r\\n    (println (winner-in-rows-cols-ordiags? board\#)))\\n\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n  (testing \\"FIXME, I fail.\\"\\r\\n    (is (\= 25 (count (set (flatten (Clojure-webapp.model/randboard))))))))\\r\\n\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n(deftest dodoublesgetrokken\\n  (is (\= 99 (count (set ((random-select 99 (range 1 100))))))))\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(println (count (set ((random-select 99 (range 1 100))))))\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n;(deftest dodoublesgetrokken\\n   (println (count (set ((random-select 99 (range 1 100))))))\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.model)\\n(ns Clojure-webapp.model\\n  (\:require [noir.session \:as session]))\\n\\n(defn split [n xs]\\r\\n  (reduce \#(if (< (count (first %1)) n)\\r\\n         (list (concat (first %1) [%2]) '())\\r\\n         (list (first %1) (concat (last %1) [%2])))\\r\\n      '(() ()) xs))(defn remove-at [k xs]\\r\\n  (let [s (split (inc k) xs)]\\r\\n    (list\\r\\n     (concat (butlast (first s)) (last s))\\r\\n     (last (first s))))\\r\\n  )\\r\\n(defn random-select [n xs]\\r\\n  (let [r (remove-at (rand-int (count xs)) xs)]\\r\\n    (if (\= 1 n)\\r\\n      (list (last r))\\r\\n      (cons (last r) (random-select (dec n) (first r))))))\\r\\n(defn remove-at [k xs]\\r\\n  (let [s (split (inc k) xs)]\\r\\n    (list\\r\\n     (concat (butlast (first s)) (last s))\\r\\n     (last (first s))))\\r\\n  )\\r\\n(defn full-board? []\\n  (< 98 (inc (\:beurt (session/get \:game-state)))))\\n  \\r\\n\\n(defn randboard []\\r\\n   (vec (clojure.core/sort (random-select 25 (range 1 100)))))\\r\\n\\n(defn empty-board []\\n  (loop [result (transient []), length-left 5, interim-val (randboard)]\\r\\n    (if (\= length-left 0)\\r\\n      (persistent\! result)\\r\\n      (recur \\r\\n        (conj\! result (vec (take 5 interim-val)))\\r\\n      (- length-left 1)\\r\\n      (drop 5 interim-val)))))\\r\\n\\n(defn reset-game\! []\\n  (session/put\! \:game-state {\:board (empty-board) \:beurt 0 \:getrokken (random-select 99 (range 1 100)) } ));init-state))\\r\\n\\n(defn get-board []\\n  (\:board (session/get \:game-state)))\\n\\n(defn get-beurtgetal []\\n    (nth (\:getrokken (session/get \:game-state)) (\:beurt (session/get \:game-state))))\\n\\n(defn getrokken-getallen []\\n  (take (\:beurt (session/get \:game-state)) (\:getrokken (session/get \:game-state))))\\n\\r\\n(defn get-board-cell \\n  ([coll] (get-board-cell (nth coll 0) (nth coll 1)))\\n  ([row col] (get-board-cell (get-board) row col))\\n  ([board row col] (get-in board [row col])))\\n\\n(defn cell-is-beurtgetal? [row col]\\r\\n    (\= (get-beurtgetal) (get-board-cell row col)))\\r\\n\\r\\n(defn winner-in-rows-cols-ordiags?  \\n  ([] (winner-in-rows-cols-ordiags? (get-board)))\\n  ([board]\\r\\n    (let [diag-coords [[[0 0] [1 1] [2 2] [3 3] [4 4]]\\r\\n                       [[0 4] [3 1] [2 2] [1 3] [0 4]]\\n                       \\r\\n                       [[0 0] [1 0] [2 0] [3 0] [4 0]]\\r\\n                       [[0 1] [1 1] [2 1] [3 1] [4 1]]\\r\\n                       [[0 2] [1 2] [2 2] [3 2] [4 2]]\\r\\n                       [[0 3] [1 3] [2 3] [3 3] [4 3]]\\r\\n                       [[0 4] [1 4] [2 4] [3 4] [4 4]]\\r\\n                       \\n                       [[0 0] [0 1] [0 2] [0 3] [0 4]]\\r\\n                       [[1 0] [1 1] [1 2] [1 3] [1 4]]\\r\\n                       [[2 0] [2 1] [2 2] [2 3] [2 4]]\\r\\n                       [[3 0] [3 1] [3 2] [3 3] [3 4]]\\r\\n                       [[4 0] [4 1] [4 2] [4 3] [4 4]]\\n                       ]]\\r\\n      (boolean (some (fn [coords] \\r\\n                       (every? (fn [coord] \\n                                 (let [cell (if (\= \\\\X (first (str (get-board-cell board (nth coord 0) (nth coord 1))))) \\n                                              (str \\\\X)\\n                                              (str (get-board-cell board (nth coord 0) (nth coord 1))))]\\n                                   (\= (str \\\\X)  cell )))\\r\\n                               coords))\\r\\n                     diag-coords)))))\\n\\n(defn winner? \\n  [] (winner-in-rows-cols-ordiags?))\\n\\r\\n(defn new-beurtstate [oldstate]\\r\\n  {\:board (get-board)\\r\\n   \:beurt (inc (\:beurt oldstate))\\r\\n   \:getrokken (\:getrokken oldstate)})\\r\\n\\r\\n(defn volgende-beurt\! []\\r\\n  (session/swap\! (fn [session-state]\\r\\n                   (assoc session-state \:game-state\\r\\n                          (new-beurtstate (\:game-state session-state))))))\\n\\r\\n(defn new-state [row col oldstate]\\r\\n  (let [X (if (\= \\\\X (first (str (get-board-cell row col)))) \\"\\" \\"X\\" )]\\r\\n    {\:board (assoc-in (\:board oldstate) [row col] (str \\\\X (get-board-cell row col)))\\r\\n     \:beurt (\:beurt oldstate)\\r\\n     \:getrokken (\:getrokken oldstate)}))\\r\\n    \\r\\n(defn play\! [row col]\\r\\n  (do (session/swap\! (fn [session-map]\\r\\n                   (assoc session-map \:game-state \\r\\n                          (new-state row col (\:game-state session-map))))))\\r\\n  (volgende-beurt\!))\\n\\n(defn showcache []\\n  (session/get \:game-state))\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n;(deftest dodoublesgetrokken\\n   (println (count (set ((random-select 99 (range 1 100))))))\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(clojure.core/ns Clojure-webapp.test.model)\\n(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n;(deftest dodoublesgetrokken\\n   ;(println (count (set ((random-select 99 (range 1 100))))))\\r\\n\\n(run-tests)\\n(clojure.core/ns Clojure-webapp.core-test)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.test.model)))" ";; Switching to Clojure-webapp.test.model namespace" "(nodoublenumbersoncard)" "(println (random-select 99 (range 1 100)))" "(println (count (random-select 99 (range 1 100))))" "(println (set (random-select 99 (range 1 100))))" "(println (count (set (random-select 99 (range 1 100)))))" "(println (is (\= 99 (count (set (random-select 99 (range 1 100)))))))" "(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n(deftest dodoublesgetrokken\\n   (is (\= 99 (count (set (random-select 99 (range 1 100)))))))\\r\\n\\n(run-tests)" "(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n(deftest dodoublesgetrokken\\n   (is (\= 99 (count (set (random-select 99 (range 1 100)))))))\\r\\n\\n(deftest playerlose\\n  (is (full-board? 98))\\n  (is (not (full-board? 97))))\\n;getrokken getallen > count \= 99\\n;hoogste index \= 98\\n\\n\\n(run-tests)" "(run-tests)" "(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n(deftest dodoublesgetrokken\\n   (is (\= 99 (count (set (random-select 99 (range 1 100)))))))\\r\\n\\n(deftest playerlose\\n  (is (full-board? 98))\\n  (is (not (full-board? 97))))\\n\\n\\n(run-tests)" "(ns Clojure-webapp.test.model\\n  (\:use clojure.test)\\n  (\:use Clojure-webapp.model)\\n  (\:require [Clojure-webapp.test.testdata \:as td]))\\n\\n(deftest checkwincombos\\n  (doseq [board\# td/win-combinations]\\n    (is (winner-in-rows-cols-ordiags? board\#))))\\n\\n(deftest nodoublenumbersoncard\\r\\n    (is (\= 25 (count (set (flatten (randboard)))))))\\r\\n\\n(deftest dodoublesgetrokken\\n   (is (\= 99 (count (set (random-select 99 (range 1 100)))))))\\r\\n\\n(deftest playerlose\\n  (is (full-board? 98)))\\n(deftest boardnotfull\\n  (is (not (full-board? 97))))\\n\\n\\n(run-tests)"]
eclipse.preferences.version=1
