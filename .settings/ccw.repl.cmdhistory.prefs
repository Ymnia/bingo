cmdhistory=[";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(get-handler)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.handler namespace" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server )" ";; Switching to Clojure-webapp.model namespace" "(get-board)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(get-handler)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.controller namespace" "(start-server)" ";; Switching to Clojure-webapp.controller namespace" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" "(model/reset-game\!)" "(Clojure-webapp.model/reset-game\!)" "(stop-server)" "(start-server)" "(stop-server)" "(start-server)" "(stop-server)" ";; Switching to Clojure-webapp.repl namespace" "(start-server)" ";; Switching to Clojure-webapp.repl namespace" "\\n(defn start-server [& [port]]\\n  (let [port (if port (Integer/parseInt port) 8080)]\\n    (reset\! server\\n            (serve (get-handler)\\n                   {\:port port\\n                    \:auto-reload? true\\n                    \:join true}))\\n    (println (str \\"You can view the site at http\://localhost\:\\" port))))\\n" "(ns Clojure-webapp.repl\\n  (\:use Clojure-webapp.handler\\n        ring.server.standalone\\n        [ring.middleware file-info file]))\\n\\n(defonce server (atom nil))\\n\\n(defn get-handler[]\\n  (-> \#'app\\n    (wrap-file \\"resources\\")\\n    (wrap-file-info)))\\n\\n(defn start-server [& [port]]\\n  (let [port (if port (Integer/parseInt port) 8080)]\\n    (reset\! server\\n            (serve (get-handler)\\n                   {\:port port\\n                    \:auto-reload? true\\n                    \:join true}))\\n    (println (str \\"You can view the site at http\://localhost\:\\" port))))\\n\\n(defn stop-server []\\n  (.stop @server)\\n  (reset\! server nil))" ";; Switching to Clojure-webapp.repl namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "\\n(defn stop-server []\\n  (.stop @server)\\n  (reset\! server nil))" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'Clojure-webapp.repl)))" ";; Switching to Clojure-webapp.repl namespace" "(start-server)"]
eclipse.preferences.version=1
